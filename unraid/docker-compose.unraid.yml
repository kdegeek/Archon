version: '3.9'

services:
  archon-server:
    image: ${REGISTRY_PREFIX}/archon-server:latest
    container_name: archon-server
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8181}:8181"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOGFIRE_TOKEN=${LOGFIRE_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PUID=${PUID:-99}
      - PGID=${PGID:-100}
      - TZ=${TZ:-America/New_York}
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - ENABLE_PROJECTS=${ENABLE_PROJECTS:-true}
    volumes:
      - ${APPDATA_PATH}/server:/appdata
      - ${DATA_PATH}:/data
      - ${APPDATA_PATH}/logs/server:/logs
    healthcheck:
      test: ["CMD-SHELL", "if command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:8181/health; elif command -v wget >/dev/null 2>&1; then wget --spider -q http://localhost:8181/health; elif command -v python3 >/dev/null 2>&1; then python3 -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8181/health\"); sys.exit(0)'; elif command -v python >/dev/null 2>&1; then python -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8181/health\"); sys.exit(0)'; else exit 1; fi"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - archon-network
    user: "${PUID:-99}:${PGID:-100}"
    mem_limit: ${SERVER_MEMORY_LIMIT:-2G}
    # Deploy blocks are ignored by Docker Compose - use mem_limit/cpus instead
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '${SERVER_CPU_LIMIT:-2}'
    #       memory: ${SERVER_MEMORY_LIMIT:-2G}
    #     reservations:
    #       cpus: '${SERVER_CPU_RESERVE:-0.5}'
    #       memory: ${SERVER_MEMORY_RESERVE:-512M}
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  archon-mcp:
    image: ${REGISTRY_PREFIX}/archon-mcp:latest
    container_name: archon-mcp
    restart: unless-stopped
    ports:
      - "${MCP_PORT:-8051}:8051"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PUID=${PUID:-99}
      - PGID=${PGID:-100}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ${APPDATA_PATH}/mcp:/appdata
      - ${DATA_PATH}:/data
      - ${APPDATA_PATH}/logs/mcp:/logs
      - ./scripts/wait-for-http.sh:/wait-for-http.sh:ro
    command: ["/bin/sh", "-c", "/wait-for-http.sh http://archon-server:8181/health && exec python -m src.mcp.main"]
    healthcheck:
      test: ["CMD-SHELL", "if command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:8051/health; elif command -v wget >/dev/null 2>&1; then wget --spider -q http://localhost:8051/health; elif command -v python3 >/dev/null 2>&1; then python3 -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8051/health\"); sys.exit(0)'; elif command -v python >/dev/null 2>&1; then python -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8051/health\"); sys.exit(0)'; else exit 1; fi"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 30s
    networks:
      - archon-network
    user: "${PUID:-99}:${PGID:-100}"
    mem_limit: ${MCP_MEMORY_LIMIT:-1G}
    # Deploy blocks are ignored by Docker Compose - use mem_limit/cpus instead
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '${MCP_CPU_LIMIT:-1}'
    #       memory: ${MCP_MEMORY_LIMIT:-1G}
    #     reservations:
    #       cpus: '${MCP_CPU_RESERVE:-0.25}'
    #       memory: ${MCP_MEMORY_RESERVE:-256M}
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  archon-agents:
    image: ${REGISTRY_PREFIX}/archon-agents:latest
    container_name: archon-agents
    restart: unless-stopped
    ports:
      - "${AGENTS_PORT:-8052}:8052"
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PUID=${PUID:-99}
      - PGID=${PGID:-100}
      - TZ=${TZ:-America/New_York}
      # GPU support (uncomment if needed)
      # - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    volumes:
      - ${APPDATA_PATH}/agents:/appdata
      - ${DATA_PATH}:/data
      - ${APPDATA_PATH}/logs/agents:/logs
      - ./scripts/wait-for-http.sh:/wait-for-http.sh:ro
    command: ["/bin/sh", "-c", "/wait-for-http.sh http://archon-server:8181/health && exec python -m src.agents.main"]
    healthcheck:
      test: ["CMD-SHELL", "if command -v curl >/dev/null 2>&1; then curl -fsS http://localhost:8052/health; elif command -v wget >/dev/null 2>&1; then wget --spider -q http://localhost:8052/health; elif command -v python3 >/dev/null 2>&1; then python3 -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8052/health\"); sys.exit(0)'; elif command -v python >/dev/null 2>&1; then python -c 'import sys,urllib.request; urllib.request.urlopen(\"http://localhost:8052/health\"); sys.exit(0)'; else exit 1; fi"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 30s
    networks:
      - archon-network
    user: "${PUID:-99}:${PGID:-100}"
    # GPU support (uncomment if needed)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    mem_limit: ${AGENTS_MEMORY_LIMIT:-2G}
    # Deploy blocks are ignored by Docker Compose - use mem_limit/cpus instead
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '${AGENTS_CPU_LIMIT:-2}'
    #       memory: ${AGENTS_MEMORY_LIMIT:-2G}
    #     reservations:
    #       cpus: '${AGENTS_CPU_RESERVE:-0.5}'
    #       memory: ${AGENTS_MEMORY_RESERVE:-512M}
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

  archon-frontend:
    image: ${REGISTRY_PREFIX}/archon-frontend:latest
    container_name: archon-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3737}:80"
    environment:
      - PUID=${PUID:-99}
      - PGID=${PGID:-100}
      - TZ=${TZ:-America/New_York}
    volumes:
      - ${APPDATA_PATH}/frontend:/appdata
      - ${APPDATA_PATH}/logs/frontend:/logs
      - ./scripts/wait-for-http.sh:/wait-for-http.sh:ro
    command: ["/bin/sh", "-c", "/wait-for-http.sh http://archon-server:8181/health && /wait-for-http.sh http://archon-mcp:8051/health && /wait-for-http.sh http://archon-agents:8052/health && exec nginx -g 'daemon off;'"]
    healthcheck:
      test: ["CMD-SHELL", "if command -v curl >/dev/null 2>&1; then curl -fsS http://localhost/; elif command -v wget >/dev/null 2>&1; then wget --spider -q http://localhost/; elif command -v busybox >/dev/null 2>&1; then busybox wget --spider -q http://localhost/; else exit 1; fi"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 20s
    networks:
      - archon-network
    mem_limit: ${FRONTEND_MEMORY_LIMIT:-512M}
    # Deploy blocks are ignored by Docker Compose - use mem_limit/cpus instead
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '${FRONTEND_CPU_LIMIT:-1}'
    #       memory: ${FRONTEND_MEMORY_LIMIT:-512M}
    #     reservations:
    #       cpus: '${FRONTEND_CPU_RESERVE:-0.25}'
    #       memory: ${FRONTEND_MEMORY_RESERVE:-128M}
    logging:
      driver: "json-file"
      options:
        max-size: "${LOG_MAX_SIZE:-10m}"
        max-file: "${LOG_MAX_FILE:-3}"

networks:
  archon-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: ${BRIDGE_NAME:-br-archon}
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

